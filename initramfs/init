#!/recovery/sbin/busybox sh
#
# PURPOSE 
# ONE KERNEL IMAGE, ONE INITRAMFS, FLASHABLE WITH HEIMDALL/ODIN/CWM 
#
# AUTHORS
# Stratosk: http://forum.xda-developers.com/showthread.php?t=1468795
# Mialwe: http://forum.xda-developers.com/showthread.php?t=1551410
#
# ORIGINAL SOURCE 
# CM9: https://github.com/CyanogenMod/android_kernel_samsung_aries


export _PATH="$PATH"
export PATH=/

# set busybox location, save busybox as we will move directories
/recovery/sbin/busybox cp /recovery/sbin/recovery /busybox
BB="/busybox"

# initialize working dir and log
$BB cd /
$BB echo "$($BB date +%H:%M:%S) - starting init..." >>boot.txt
exec >>boot.txt 2>&1

$BB rm init

$BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "generating mount directories..."
$BB mkdir proc
$BB mkdir sys
$BB mkdir cache
$BB mkdir sdcard
$BB mkdir system
$BB mkdir data

$BB mkdir /dev
$BB mkdir /dev/block

$BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "generating device nodes..."
$BB mknod /dev/block/mmcblk0 b 179 0
$BB mknod /dev/block/mmcblk0p1 b 179 1
$BB mknod /dev/block/mmcblk0p2 b 179 2
$BB mknod /dev/block/mtdblock2 b 31 2
$BB mknod /dev/block/mtdblock3 b 31 3

$BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "mounting devices..."
$BB mount -t proc proc /proc
$BB mount -t sysfs sysfs /sys
$BB mount -t yaffs2 /dev/block/mtdblock2 /system

KV=`$BB uname -r`
$BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "version: $KV"
$BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo -n "commandline: "; $BB cat /proc/cmdline

$BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "recreating /system/lib/modules if needed..."
$BB mkdir -p /system/lib/modules
 
if $BB [ "`/busybox grep $KV /system/lib/modules/bcm4329.ko`" ]; then
    $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "kernel files already installed, nothing to do"
else
    $BB mount -t ext4 /dev/block/mmcblk0p2 /data
    $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "module version change detected, updating..."
    $BB rm /system/lib/modules/*
    $BB cp /files/modules/* /system/lib/modules/

    if $BB [ -f /data/local/logger.ko ]; then
        $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "found /data/local/logger.ko, updating..."
        $BB cp /system/lib/modules/logger.ko /data/local/logger.ko
    else
        $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "/data/local/logger.ko, not found, skipping..."
    fi

    if $BB [ ! -d /system/etc/init.d ]; then 
        $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "creating /system/etc/init.d"
        $BB mkdir /system/etc/init.d
        $BB chmod 777 /system/etc/init.d
    fi

    APP="MidnightControl.apk"
    DALVIK="midnight.control"
    if $BB [ -f /files/$APP ];then
        $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "coping kernel app"
        $BB rm -f /system/app/$APP
        $BB rm -f /data/dalvik-cache/*$DALVIK*
        $BB cp /files/$APP /system/app/
        $BB chown 0.0 /system/app/$APP
        $BB chmod 644 /system/app/$APP    
    fi
    
    $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "updating lights.aries.so..."
    $BB mv /files/hw/* /system/lib/hw/
    $BB chmod 644 /system/lib/hw/lights.aries.so
    
    $BB umount /data
fi

$BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "starting bootmode detection..."
if $BB test -e /cache/.startrecovery || $BB grep -q bootmode=2 /proc/cmdline ; then
	# recovery boot
    $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "moving recovery to /..."
	$BB mv /recovery/* /
	$BB echo 0 > /sys/class/power_supply/battery/charging_mode_booting
elif ! $BB test -e /system/build.prop ; then
	# emergency boot
    $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "build.prop not found, starting emergency boot..."
    erase_image cache
    $BB mount -t yaffs2 /dev/block/mtdblock3 /cache
    $BB mkdir /cache/recovery
	$BB mount -t vfat /dev/block/mmcblk0p1 /sdcard	

    $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "checking cm9 update config /sdcard/cyanogenmod.cfg..."
	UPDATE=$($BB cat /sdcard/cyanogenmod.cfg)
	if $BB test -e $UPDATE ; then
        $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "cm update found, initializing extendedcommand..."
		$BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "install_zip(\"`echo $UPDATE`\");" > /cache/recovery/extendedcommand
  	else
        $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "cm update not found, doing nothing"
    fi
    $BB umount /sdcard
    $BB umount /cache
    $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "moving recovery to /..."
    $BB mv /recovery/* /
	$BB echo 0 > /sys/class/power_supply/battery/charging_mode_booting
else
    $BB mv /boot/* /
fi

if $BB grep -q 1 /sys/class/power_supply/battery/charging_mode_booting ; then
	# low power mode
    $BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "found charging_mode command"
	$BB cp /lpm.rc /init.rc
	$BB rm /init.aries.rc
fi

$BB echo -n "$($BB date +%H:%M:%S) - ";$BB echo "cleaning up..."
$BB umount /sys
$BB umount /proc
$BB umount /system

$BB rm -r /files
$BB rm -r /sdcard
$BB rm /erase_image

# original initramfs directories not needed anymore,
# busybox not needed anymore...
$BB rm -rf /boot
$BB rm -rf /recovery

$BB echo -n "$($BB date +%H:%M:%S) - done."
$BB rm -fr /dev/*

# finally remove busybox
$BB rm /busybox

export PATH="${_PATH}"
exec /init
